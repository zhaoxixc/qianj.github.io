{"posts":[{"title":"IC环境的汇总","text":"找不到.so库文件如出现 1/usr/bin/ld ***.so *（或者其他） needed by 路径 not found ，后面可能会跟着 (try using -rpath or -rpath-link) 大概率是环境变量LD_LIBRARY_PATH中的没有包含此.so的路径。通过find查找该.so文件的路径 1find &lt;dir&gt; -name &quot;*.so&quot; 将.so的路径加到LD_LIBRARY_PATH环境变量中 1$ setenv LD_LIBRARY_PATH /a/b/c/:$LD_LIBRARY_PATH 常用的一些软件包1234567891011121314151617$ yum install redhat-lsb-core.i686$ yum install libxml2 glibc-devel gcc-c++ gcc libmng libGLU glibc-devel.i686 libXp libXt libXtst zlib ncurses-libs libXScrnSaver$ yum install libXp.i686 libXt.i686 libXtst.i686 zlib.i686 elfutils-libelf.i686 ncurses-libs.i686$ yum install htop ctags tree iftop ksh cscope vim-X11 tmux git git-svn subversion tcsh tcl tcl-devel filezilla ftp konsole ncdu$ yum groupinstall -y &quot;Development tools&quot;$ yum groupinstall -y &quot;Additional Development&quot;$ yum install meld lsb-core-noarch cgdb python3 python3-pip pdb python2-pip xorg-x11-fonts* readline.i686 ntpdate ntp$ yum-complete-transaction$ ln -s /lib/libreadline.so.6 /lib/libreadline.so.5$ ln -s /lib/libhistory.so.6 /lib/libhistory.so.5$ ln -s /usr/lib64/libreadline.so /usr/lib64/libreadline.so.5$ ln -s /usr/lib64/libhistory.so /usr/lib64/libhistory.so.5$ yum -y install openldap-clients nss-pam-ldapd nscd$ yum install libpng12-devel.x86_64 xterm $ yum install ld-linux.so.2 libstdc++.so.6 libXext.so.6 expat.i686 其他库/软件包参考1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162yum clean allyum makecacheyum install -y binutils-dev*yum install -y ImageMagick.i686yum install -y ImageMagickyum install -y ntfs-3gyum install -y p7zipyum install -y p7zip-pluginsyum install -y libXss.so.1yum install -y libXmu.so.6yum install -y tigervnc-serveryum install -y tigervncyum install -y sambayum install -y nfs*yum install -y tree yum install -y dos2unix yum install -y libXt.so.6yum install -y libXp.so.6yum install -y xorg-x11-fonts-ISO8859-1-75dpiyum install -y libXtst.so.6yum install -y kshyum install -y tcshyum install -y acpid yum install -y libGLU.so.1yum install -y libelf.so.1yum install -y libXrender.so.1yum install -y libXrandr.so.2yum install -y *xorg*yum install -y cshyum install -y libXpyum install -y compat*.i686yum install -y openmotifyum install -y libfftw3.so.3yum install -y glibc*.i686yum install -y *readline*.i686yum install -y vim*yum install -y libXpm.i686yum install -y libXp*yum install -y redhat-lsb.x86_64yum install -y redhat-lsb*.i686*yum install -y motif.i686yum install -y qt5-qtwebkityum install -y apr*.i686yum install -y tcl.i686yum install -y tk.i686yum install -y gdbm.i686yum install -y netpbmyum install -y netpbm.i686yum install -y zshyum install -y libXaw.i686yum install -y ncurses*.i686yum install -y libXScrnSaver-1.2.2-6.1.el7.x86_64yum install -y gnuplotyum install -y plotutilsyum install -y openssl-develyum install -y Xvfbyum install -y python2yum install -y https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/compat-libstdc++-33-3.2.3-72.el7.x86_64.rpmyum install -y https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/compat-libstdc++-33-3.2.3-72.el7.i686.rpmyum install -y https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/xorg-x11-server-Xvfb-1.20.4-10.el7.x86_64.rpm# 最后三个可以下载下来 yum install 安装 内网安装的一种方案在一台已经安装完软件包并运行稳定一段时间的服务器A上导出已安装的rpm包：rpm -qa ˃rpmlist将导出的rpmlist文件传到新服务器B，然后执行：cat rpmlist |xargs yum -y install centos6.x gnome挂死表现为新建vnc黑屏 123456$ top # 查看到dbus进程CPU负载高# 查看.so依赖关系，均正常$ which dbus-launch$ ldd /usr/bin/dbus-launch$ which dbus-daemon$ ldd /bin/dbus-daemon 增大ulimit参数 12345678ulimit -SHn 65535ulimit -u 4134117ulimit -n 65535ulimit -d unlimitedulimit -m unlimitedulimit -s unlimitedulimit -t unlimitedulimit -v unlimited 杀死离职人员pid 123ps -ef | grep dbus-daemonkill -9 PIDNUM ssh登录慢/限制/免密ssh登录慢考虑禁用sshd配置中的DNS 1234$ vim /etc/ssh/sshd_configuseDNS no$ systemctl restart sshd 存在私有服务资源情况时，可以指定用户或组来登录运算服务器 123456$ vim /etc/ssh/sshd_config# 禁止DenyUsers zhangsan lisi wangwuDenyGroups Z10# 允许AllowUsers qianj admin root 从登录服务器免密登录运算服务器 123$ ssh-keygen # 生成ssh密钥对$ ssh-copy-id wds081 # 拷贝密钥信息到任意一台运算服务器# 注意！！！所有运算服务器都是共用的一个home目录，所以copy只需要做一次，不需要再copy到其他运算服务器了！！！ 个性化设置（.cshrc）提示符格式大部分初始状态为username@hostname:~&gt; 1234567$ vim ~/.cshrcset prompt = '%m@%n-%/:&gt;'# 显示效果为hostname@username-/home/username:&gt;$ vim ~/.cshrcset prompt = '%n@%m:%c&gt;' # 初始默认 文件和文件夹显示颜色自定义在现实文件或者文件夹列表的时候各自不同的类型与结尾使用不同的颜色 12345$ discolors –p # 查看# 以下示例tar/tgz/gz结尾的压缩包显示为红色$ vim ~/.cshrcset LS_COLORS ‘.tar=31:.tgz=31:.gz=31’ 设置alias12345$ vim ~/.cshrcalias .. &quot;cd ..&quot;alias cd 'chdir \\!*; ls' # 改变目录的同时会列出改变后的目录下的内容alias qenv 'env | grep \\!*' # 输入 qenv HOME的时候会列出环境变量中包含HOME的项alias home ‘cd ~/’ # 使用home命令直接返回个人家目录 如果遇到当前目录的程序或者脚本在具有权限的前提下，但是无法执行时(出现command not found)，可以在cshrc文件中加入 1set path = ($path ./) 最后还需要source一下.cshrc文件，使其生效 1$ source ~/.cshrc .vimrc配置12345678$ vim ~/.vimrcset backspace=2 # 可以直接解决退格键的问题（还可以设置indent,eol,start）syntax on # 代码高亮显示set hlsearch # 搜索高亮设置set autoread # 文件修改后自动载入set nu # 显示行号set background=dark # 背景使用黑色set ts=4 # 设置一个tab等于4个空格 内网环境pip无法安装python库在外网环境pip download下载好对应的库及其依赖 1pip download -r requirements.txt --platform linux_x86_64 --python-version 38 --abi cp38 --implementation cp --only-binary=:all: 如果外部环境和内部环境的平台及python版本相同，则可以使用 1pip download -r requirements.txt 然后将安装包传入内部环境进行安装 1pip install ***.whl 如果python库附带一些依赖包，而依赖包的版本有可能存在冲突，那么install的时候可能采用如下指令 1pip install --no-index --find-links=&lt;DIR&gt; ***.whl xfce123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114# 1、安装软件yum install epel-release -yyum groupinstall &quot;Server with GUI&quot; -yyum groupinstall &quot;Xfce&quot; -yyum grouplist hiddenyum groupinstall &quot;Fonts&quot; # 安装字体包fc-list :lang=zh-cn # 可以看到当前已经安装的中文字体yum groupinstall &quot;Compatibility Libraries&quot;yum install libX11.i686 -y#2、配置默认targetsystemctl set-default graphical.targetsystemctl get-defaultsystemctl isolate graphical.target#3、禁用firewalld和selinux#4、配置lightdmsystemctl stop gdmsystemctl disable gdm$ vi /etc/lightdm/lightdm.conf[XDMCPServer]enabled=trueport=177$ systemctl enable lightdm$ systemctl start lightdm#5、删除无关的包gnome-packagekit-3.28.0mate-screensaver-1.16.1-1.el7.x86_64 gnome-screensaver-3.6.1-20.el7.x86_64gnome-user-docs-3.28.2-1.el7.noarch…$ yum remove gnome-packagekit-3.28.0$ yum remove gnome-user-docs$ yum remove gnome-screensaver#6、给gnome桌面增加右键 Terminal 菜单（xfce 默认存在）yum install nautilus-open-terminal#7、配置latency-performance，保障系统是低延迟模式$ yum update$ yum install tuned$ systemctl start tuned $ systemctl enable tuned$ tuned-adm profile latency-performance$ tuned-adm active# 验证 latency-performance 已经生效#8、配置dbus$ vim /etc/security/limits.conf# 在文件末尾添加* soft nofile 65535* hard nofile 65535$ cd /etc/security/limits.d/$ cat 20-nproc.conf * soft nproc 65535* soft nofile 65535root soft nproc unlimited# 否则会出现 dbus 为 100%的情况，但是 20-nproc.conf 这里的*，如果配置为 65535 也会有其他影响，可能某个用户，开启太多经常，导致服务器异常。默认是 4096# 查看是否生效$ ps aux|grep gnome-terminal # 查看到对应的PIDNUM$ cd /proc/15758 # 进入该PIDNUM$ cat limits Limit Soft Limit Hard Limit Units Max processes 4096 4096 processes Max open files 65535 65535 files#9、禁止 lightdm 在登录的时候显示所有 User，默认是允许的$ vi /etc/lightdm/lightdm.conf[Seat:*]#type=localgreeter-hide-users=true#10、配置右键 Terminal 打开后的默认目录$ vi /etc/xdg/Thunar/uca.xml&lt;command&gt;exo-open --working-directory %d --launch TerminalEmulator&lt;/command&gt; # 这里修改默认 %f 为 %d#11、配置默认的 terminal 为 Gnome-terminal$ vi /etc/xdg/xfce4/helpers.rcWebBrowser=chromium-browserMailReader=thunderbirdTerminalEmulator=gnome-terminalFileManager=Thunar#12、Xfce policykit agent 错误$ cd /etc/xdg/autostart/$ mv /etc/xdg/autostart/xfce-polkit.desktop xfce-polkit.desktop.bak# 或者尝试yum update#13、设置 XFCE 作为主要桌面$ cd /usr/share/xsessions$ mkdir bak$ mv gnome* bak/$ mv mate* bak/#14、Group icons on Panel显示设置（根据个人喜好）开了多个Terminal，每个都在panel上，不方便。可以放一起，通过下拉菜单来选择。步骤如下可以右击Panel处，依次选择Panel--&gt;Panel Prferences--&gt;Items--&gt;Windows Bottons双击，或者点击扳手图标，在Behaviour下修改Window grouping为Always即重叠；选择Never则平铺不重叠。或者修改xfce4-panel.xml文件 &lt;property name=&quot;plugins&quot; type=&quot;empty&quot;&gt; &lt;property name=&quot;plugin-1&quot; type=&quot;string&quot; value=&quot;applicationsmenu&quot;/&gt; &lt;property name=&quot;plugin-2&quot; type=&quot;string&quot; value=&quot;actions&quot;/&gt; &lt;property name=&quot;plugin-3&quot; type=&quot;string&quot; value=&quot;tasklist&quot;&gt; &lt;property name=&quot;grouping&quot; type=&quot;uint&quot; value=&quot;1&quot;/&gt; &lt;/property&gt; &lt;property name=&quot;plugin-15&quot; type=&quot;string&quot; value=&quot;separator&quot;&gt; 本文部分配置收集于网络 课程中心Qianj.51CTO","link":"/clqtboe0k000040yj6czgbfpq.html"},{"title":"centos7.9作为运算服务器的一些优化","text":"内核参数优化提高文件描述符限制在/etc/security/limits.conf文件中增加以下行 12* hard nofile 65536* soft nofile 65536 提高进程数限制在/etc/security/limits.conf文件中增加以下行 12* hard nproc 65536* soft nproc 65536 禁用透明大页（Transparent Huge Pages）在/etc/default/grub文件中的GRUB_CMDLINE_LINUX行中增加以下参数 1transparent_hugepage=never 禁用NUMA（非统一内存访问）在/boot/grub2/grub.cfg文件中menuentry段中的内核启动参数中增加以下参数 1numa=off 调整内核参数在/etc/sysctl.conf文件中增加以下行 12fs.file-max = 1048576vm.max_map_count = 262144 网络参数优化增加文件句柄限制在/etc/security/limits.conf文件中增加以下行 12* hard memlock unlimited* soft memlock unlimited 调整TCP参数在/etc/sysctl.conf文件中增加以下行 123456net.ipv4.tcp_max_syn_backlog = 8192net.core.somaxconn = 8192net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_tw_buckets = 20000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_fin_timeout = 15 资源管理优化禁用THP（Transparent Huge Pages）编辑/etc/rc.d/rc.local文件，在文件末尾添加以下行 12echo never &gt; /sys/kernel/mm/transparent_hugepage/defragecho never &gt; /sys/kernel/mm/transparent_hugepage/enabled 禁用IRQ负载平衡在/etc/default/grub文件中增加以下参数 1isolcpus=2-15 nohz_full=2-15 rcu_nocbs=2-15 禁用CPU频率调节机制在/etc/default/grub文件中增加以下参数 1intel_pstate=disable 关闭不必要的系统服务使用systemctl命令停止和禁用不必要的服务 生产环境已用1234567891011121314151617181920212223242526# 限制$ cat /etc/security/limits.d/22-iclab.conf @THU hard fsize 52428800 @THU soft fsize 52428800 @THU hard nofile 10000 @THU soft nofile 10000 @THU hard nproc 9000 @THU soft nproc 9000#禁用ipv6$ cat &lt;&lt;EOF &gt;&gt; /etc/sysctl.confnet.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.default.autoconf=0EOF$ sysctl ‐p# ssh$ sed -i 's/#X11DisplayOffset.*/X11DisplayOffset 200/g' /etc/ssh/sshd_config$ vi /etc/ssh/sshd_configPubkeyAuthentication yesPermitRootLogin yesAddressFamily inet$ systemctl restart sshd 脚本12345678910111213141516171819202122232425262728293031#!/bin/bash# 内核参数优化echo &quot;* hard nofile 65536&quot; &gt;&gt; /etc/security/limits.confecho &quot;* soft nofile 65536&quot; &gt;&gt; /etc/security/limits.confecho &quot;* hard nproc 65536&quot; &gt;&gt; /etc/security/limits.confecho &quot;* soft nproc 65536&quot; &gt;&gt; /etc/security/limits.confecho &quot;kernel.numa_balancing = 0&quot; &gt;&gt; /etc/sysctl.confecho &quot;fs.file-max = 1048576&quot; &gt;&gt; /etc/sysctl.confecho &quot;vm.max_map_count = 262144&quot; &gt;&gt; /etc/sysctl.conf# 网络参数优化echo &quot;* hard memlock unlimited&quot; &gt;&gt; /etc/security/limits.confecho &quot;* soft memlock unlimited&quot; &gt;&gt; /etc/security/limits.confecho &quot;net.ipv4.tcp_max_syn_backlog = 8192&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.core.somaxconn = 8192&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_syncookies = 1&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_max_tw_buckets = 20000&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_tw_reuse = 1&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_fin_timeout = 15&quot; &gt;&gt; /etc/sysctl.conf# 资源管理优化echo &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot; &gt;&gt; /etc/rc.localecho &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot; &gt;&gt; /etc/rc.localecho &quot;GRUB_CMDLINE_LINUX=\\&quot;transparent_hugepage=never\\&quot;&quot; &gt;&gt; /etc/default/grubgrub2-mkconfig -o /boot/grub2/grub.cfgecho &quot;GRUB_CMDLINE_LINUX=\\&quot;numa=off\\&quot;&quot; &gt;&gt; /etc/default/grubgrub2-mkconfig -o /boot/grub2/grub.cfgecho &quot;GRUB_CMDLINE_LINUX=\\&quot;isolcpus=2-15 nohz_full=2-15 rcu_nocbs=2-15\\&quot;&quot; &gt;&gt; /etc/default/grubgrub2-mkconfig -o /boot/grub2/grub.cfgecho &quot;GRUB_CMDLINE_LINUX=\\&quot;intel_pstate=disable\\&quot;&quot; &gt;&gt; /etc/default/grubgrub2-mkconfig -o /boot/grub2/grub.cfg# 重启系统以使优化生效reboot 此文章部分来源于网络 课程中心Qianj.51CTO","link":"/clqtboe0t000140yjel27albg.html"},{"title":"centos7自定义关机前执行脚本","text":"创建脚本1234567cat &gt; /opt/test.sh &lt;&lt; 'EOF'#!/bin/bashecho `date &quot;+%G-%m-%d %H-%M-%S&quot;` &gt;&gt; /opt/test.log EOFchmod +x /opt/test.sh 创建systemd服务12345678910111213141516cat &gt; /usr/lib/systemd/system/stopSrv.service &lt;&lt; EOF[Unit]Description=close services before reboot and shutdownDefaultDependencies=noBefore=shutdown.target reboot.target halt.target[Service]Type=oneshotExecStart=/opt/test.shRemainAfterExit=yes[Install]WantedBy=halt.target reboot.target shutdown.targetEOF 启动服务1234systemctl daemon-reloadsystemctl enable stopSrvsystemctl restart stopSrvsystemctl status stopSrv 验证1234567# 有效果rebootshutdown -r nowshutdown -h now# 无效果poweroff 此文章来源于网络 课程中心Qianj.51CTO","link":"/clqtboe10000440yj2q0u79hy.html"},{"title":"install synopsys dve-addon","text":"服务器中已经有了同版本的VCS，但是安装dve工具的时候异常，如下图 测试老版本的VCS2016版本的VCS中包含了dve工具，可以使用dve工具直接启动。2019版本的VCS中包含dve命令，但是启动不了，需要单独安装dve工具才行。 安装dve-addon1$ /eda/tools/synopsys/installer/5.6/setup.sh -install_as_root 重点！！！路径要选择已经安装了的同版本的VCS路径 和谐123$ cd install_dir$ /eda/tools/synopsys/crack_tools/synopsys_checksum . -y$ /eda/tools/synopsys/crack_tools/pubkey_verify . -y 启动测试123$ module unload vcs$ module load vcs/P-2019.06-SP1-1$ dve 课程中心Qianj.51CTO","link":"/clqtboe11000540yj981fd3ig.html"},{"title":"python字符串格式化三种方式","text":"python字符串格式化三种方式 课程中心Qianj.51CTO","link":"/clqtboe13000640yj9w4o6bi2.html"},{"title":"保密室EDA","text":"说明部署单机EDA（vcs/verdi/syn）可module管理，也可写到~/.bashrc中 环境配置123$ vim /etc/profilesource /usr/share/Modules/3.2.10/init/bashexport MODULEPATH=&quot;$MODULEPATH:/eda/env/modules/tools&quot; 不用每次手动load工具 12345$ vim ~/.bashrcmodule load synopsysmodule load syn/K-2015.06-SP5module load vcs/P-2019.06-SP1-1module load verdi/P-2019.06-1 验证工具12verdidc_shell 课程中心Qianj.51CTO","link":"/clqtboe19000a40yjdy66cez3.html"},{"title":"chmod 700 禁用运算服务器的一些功能","text":"请根据实际情况酌情使用！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!/bin/bash#Server safe by Root#Create by Fasteda.cn#2022,03,12chmod 700 /bin/pingchmod 700 /bin/traceroutechmod 700 /bin/netstat chmod 700 /bin/mailchmod 700 /bin/mailxchmod 700 /bin/mountchmod 700 /sbin/service chmod 700 /sbin/ifconfigchmod 700 /sbin/arpchmod 700 /sbin/arpingchmod 700 /sbin/ipchmod 700 /sbin/lvmchmod 700 /sbin/runuser chmod 700 /sbin/route chmod 700 /usr/sbin/iotopchmod 700 /usr/sbin/lsof chmod 700 /usr/sbin/tcpdump chmod 700 /usr/sbin/sendmailchmod 700 /usr/sbin/sendmail.postfixchmod 700 /usr/bin/sarchmod 700 /usr/bin/sshchmod 700 /usr/bin/sudochmod 700 /usr/bin/lastchmod 700 /usr/bin/netchmod 700 /usr/bin/lastlog chmod 700 /usr/bin/xrdbchmod 700 /usr/bin/akregatorchmod 700 /usr/bin/kgetchmod 700 /usr/bin/curlchmod 700 /usr/bin/mailchmod 700 /usr/bin/mailxchmod 700 /usr/bin/wgetchmod 700 /usr/bin/rzchmod 700 /usr/bin/szchmod 700 /usr/bin/ftpchmod 700 /usr/bin/sftpchmod 700 /usr/bin/scpchmod 700 /usr/bin/traceroutechmod 700 /usr/bin/kmailchmod 700 /usr/bin/knodechmod 700 /usr/bin/konquerorchmod 700 /usr/bin/kopetechmod 700 /usr/bin/pppchmod 700 /usr/bin/kpppchmod 700 /usr/bin/krdcchmod 700 /usr/bin/krfbchmod 700 /usr/bin/remote-viewer chmod 700 /usr/bin/tn5250 chmod 700 /usr/bin/k3b chmod 700 /usr/bin/kmidchmod 700 /usr/bin/x3270chmod 700 /usr/bin/virt-manager chmod 700 /usr/bin/virt-install chmod 700 /usr/bin/virt-viewer 本文整理于网络 课程中心Qianj.51CTO","link":"/clqtboe1e000h40yjcyibbp0o.html"},{"title":"日观EDA软件部署","text":"1、给的MAC用于生成lic文件，使用的是wds082的MAC2、将三个压缩包解压后放到/eda/tools/rigoron/目录下3、设置环境变量 12$ setenvRIGORON_LICENSE_FILE 27027@192.168.11.82$ setenv RIGORON_DIR/eda/tools/rigoron/RigorCons0802 4、启动RigorCons软件 1$ /eda/tools/rigoron/RigorCons0802/bin/Taish 5、flow的启动进入到flow的软件包目录 123456789101112$ pwd/eda/tools/rigoron/flowx86muchuang20230802/flow# 启动服务端（端口号要和lic使用的不同）$ ./TAIFlow server -p27031starting TaiFlow...start success# 启动客户端$ ./TAIFlow clientstarting TaiFlow...start success 然后在软件的File中设置Host，左下角显示connected 课程中心Qianj.51CTO","link":"/clqtboe1g000j40yje5wi7i0j.html"},{"title":"检查系统CPU&#x2F;MEM利用率","text":"12345678910111213141516171819$ pwd/home/qianj/tools/check_sysinfo$ cat use_check_cpu_mem.sh#!/bin/bashsrvs=&quot;wds045 wds046 wds047 wds049 wds081 wds082 wds083 wds084 wds085 wds086&quot;for srv in $srvsdo ssh $srv 'python3 /home/qianj/tools/check_cpu_mem.py'done $ cat check_cpu_mem.pyimport socketimport psutilnameinfo = socket.gethostname()cpuinfo = psutil.cpu_percent(interval=1)meminfo = psutil.virtual_memory().percentprint(&quot;{} ==&gt; CPU使用率：{} 内存使用率：{}&quot;.format(nameinfo,cpuinfo,meminfo)) 课程中心Qianj.51CTO","link":"/clqtboe1i000o40yj6y654on6.html"},{"title":"2023.12.31","text":"竹子是一种草，但比很多树长得都高 靠想象打开未来一扇扇大门，靠理性选择其中正确的一扇 最聪明的人，是最不愿意浪费时间的人 世界最高峰珠穆朗玛峰平均每年仍会增高1厘米 虽然北极表面上尽是冰雪，深处却有丰富的金矿、钻石和铜铁 取得成就时坚持不懈，比遭遇失败时顽强不屈更重要 将小事做到极致，是做大事业的第一步 大脑处理新信息时会觉得时间变慢，探索让我们感觉活得更久 金星虽然是不发光的行星，但却比许多恒星还要明亮 人生必有风险，因此令人着迷 渴望飞翔的人不会甘心于爬行 如果你因为失去太阳而流泪，那你也将失去群星了 船停在港湾固然安全，但那不是造船的初衷 偏见是负担，它混淆过去，威胁未来，并使人无法掌握当下 不贵于无过，而贵于能改过 知而不行，只是未知 大脑只有身体的2重，却使用17%的能量思考着这个世界 人类大脑中的神经细胞数与银河系内的恒星数量相当 人跟树一样，越是向往高处的阳光，根就越要伸向黑暗的地底 无限的宽容必将导致宽容的消失 浅水是喧哗的，深水是沉默的 自我控制是最强者的本能 若能脱颖而出，何必苦苦融入 变化不一定能带来进化，但所有进化都始于变化 不经冬寒，不知春暖 过于爽快地承认失败，就可能发觉不了曾与正确非常接近 黑夜无论怎样悠长，白昼总会到来 今日之失，未必不为后日之得 若不知道要驶向哪个码头，那么任何风都不会是顺风 没有执行力的远见等同于空想 逆境使人自知 飞的最高的海鸥，能看得到最远的奇景 生活犹如骑单车，唯有前进才能保持平衡 成长与舒适无法并存 功不求戾，但求有恒 争取摘到月亮，因为即使你坠落也会落在群星之间 阳光越是强烈的地方，阴影就越是深邃 万物皆有裂痕，那是光照进来的地方 过分揣测别人的想法，就会失去自己的立场 没有被听见不是沉默的理由 天空灰暗到一定程度，星辰就会熠熠生辉 杨柳不随春色减，松柏唯有岁寒知 山谷的最低点正是山的起点 欲变世界，先变自己 种一棵树最好的时间永远是当下 凡是过去，皆为序幕 怕什么真理无穷，进一寸有一寸的欢喜 难度就是价值所在 光子从日核走到表面需要20万年，坚持日可贵的品质 少睡者次日会多摄入385卡路里，过劳肥由此而来 把时间用在思考上最能节省时间 课程中心Qianj.51CTO","link":"/clqtlv1od00007oyjhouv9ggc.html"},{"title":"module工具的安装和使用","text":"在Linux中，当同一款编辑器、运行库、软件存在多个版本且多个版本都需要在不同的场景或人员使用时，配置这些内容的环境变量是一个非常繁琐的过程，而Module工具则提供了一个简单快速的方法，Module全称为 module-environment，是一个专门管理环境变量的工具。” 安装module官网 Module 工具是基于 TCL（8.4 以上版本）工具的，目前 module 工具为 4.4.1，基于 tcl8.5 或更高版本，而 module3.X 版本则基于 tcl8.4 版本，Redhat6 系列 yum 安装的 tcl 为 8.5 版本。 Module 工具可以使用二进制编译安装，也可以使用 yum/apt 快速安装， Redhat/Centos 使用：yum install environment-modules； ubuntu 等使用：apt-get install environment-modules 安装。 编译安装可以每台运算服务器单独安装，也可以安装到共享路径下 12345678910# mc在用yum install tcl tcl-develcd /eda/share/conf/tar xf modules-3.2.10.tar.bz2cd modules-3.2.10./configure --prefix=/usr/sharemake &amp;&amp; make installln -s /usr/share/Modules/3.2.10/init/csh /etc/profile.d/modules.cshln -s /usr/share/Modules/3.2.10/bin/modulecmd /usr/bin/modulecmd 或者 1234567891011121314151617181920212223242526# 李艳青cd modules-3.2.10./configure --prefix=/usr/tools/Modules --modulefilesdir=/usr/tools/Modules/modulefiles --enable-dotmodulespathmake; make installll /usr/tools/Modules# 可以看到一些生成的文件和目录，如bin/init/libexec/modulefiles/share目录# 接着安装后的配置# 要保证相关设置在系统启动的时候都能被正确配置，这些设置文件都放在 init 路径下# 将 profile.sh/profile.csh 都连接到 /etc/profile.d 下面，注意源文件要写绝对路径ln -s /usr/tools/Modules/init/profile.csh /etc/profile.d/modules.cshln -s /usr/tools/Modules/init/profile.sh /etc/profile.d/modules.sh# 配置完成后，可切换到普通用户下验证module avil# 简单环境配置。进入到modulefiles目录下，新增配置文件cd /usr/tools/Modules/modulefiilesmkdir cadencecd cadencecp ../modules ic618vim ic618 # 在末尾添加setenv ICV ic618# 编辑完成后立即生效，验证module avilmodule load cadence ic618echo $ICV # 此时返回ic618说明OK 初始化安装 module 工具后，你会发现它并不是一个可执行的二进制文件，你需要对 module 工具进行一次初始化。 在 /usr/share/modules/init (注意此处，可能是 module 也可能是 modules) 内部你可以找到针对各个脚本的二进制初始化文件，找到你当前的脚本，source 这个二进制文件，例如你是 bash 脚本，source /usr/share/modules/init/bash 之后，你就可以使用 module 工具了。 常用命令和使用1234567module avail # 显示可以使用的模块module load/add # 加载模块module unload/rm # 卸载模块module list # 显示已经加载的模块 Module 工具依托于 MODULEPATH 这个环境变量来查找配置信息目录，也就是说你在设置好目录结构，配置好环境变量后，只需要设置这一个 module 的环境变量，那么 module 工具就会自动去查找这个路径下的所有配置信息。 [qianj@wds080 cadence]$ env | grep -i modulepath MODULEPATH=/usr/share/Modules/versions:/usr/share/Modules/$MODULE_VERSION/modulefiles:/usr/share/Modules/modulefiles:/eda/env/modules/tools:/eda/env/modules/proj:/eda/env/modules/library [qianj@wds080 cadence]$ modulefile的写法通常我们会将同一类的软件、库等内容放在同一个目录，假设目录名为 /soft，在 soft 目录下包含 gcc、python、java 等常用工具，而 gcc 又包含 4.8.4、4.9.3、4.9.7 三个版本，python 包含 2.7、3.6 两个版本、java 包含 1.6、1.7、1.8 三个版本，那么它的目录结构如下： 那么 soft 目录即为 MODULEPATH 变量设置的目录，最后面的版本文件为 modulefile，我们只需要安装这种目录格式创建目录和文件即可。 在编写 modulefile 文件时的几个注意事项，例如我要编写 4.8.4 这个文件，注意，这个文件时 gcc4.8.4 的环境变量配置文件，不是 gcc 的存放路径。它必须是一个文件、而不是一个文件夹。 在文件开头一定要写上 #%Module1.0 这个是识别这个文件为 modulefile 的，没有他这个文件不会被识别 prepend-path 要修改的环境变量路径 这个命令会把工具路径添加到环境变量的前面 setenv 环境变量名 值 这个命令会把你需要的环境变量配置到系统中 请看以下示例：gcc/4.8.4 （这个工具我安装在 /software/gcc/4.8.4 / 下） #%Module1.0 setenv GCC_HOME /software/gcc/4.8.4/ prepend-path PATH /software/gcc/4.8.4/bin 这就是一个 gcc4.8.4 的环境变量配置，我们将所有的环境变量配置好之后，使用 modue avail 命令即可查看到相应信息，如下所示： 使用 module load 载入相应的工具和版本 使用 module list 查看载入的工具和版本 使用 module show 工具 / 版本 来查看相应配置信息（非常用命令） 这时候我们可以 echo $PATH 来查看是否将 gcc 路径添加到了 PATH 路径中 使用 echo $GCC_HOME 查看是否已经设置好此环境变量 这时候代表你的目录设置、modulefile 都没有问题，只要软件 / 工具等存放的路径没有问题，那么即可正常使用。 多路径MODULEPATH 可以设置为多个路径，例如我设置 /soft、/soft1、/soft2 都是工具、软件等脚本的存放路径，那么我就可以设置 MODULEPATH 为多个路径，路径之间用冒号分割。 这时候我们 module avail 来查看信息，即可看到如下 注意：千万不要出现软件名和版本一样的 modulefile 默认版本在 module avail 中，我们可以设置默认版本，例如我想将 gcc 4.9.3 设置为默认版本，当我 module load gcc 的时候，就直接载入 4.9.3 版本，我们可以使用.version 文件来控制这个默认信息。 在 modulefile 同级目录下创建.version 文件，看清楚，前面有个点，写法如下 #%Module1.0 set ModulesVersion “4.9.3 使用 module avail 查看信息 在 4.9.3 版本后面多了一个（default） 然后使用module rm gcc后重新module load gcc，在用module list查看 注意：由于 module 只能载入同类工具、库的某一个版本，使用module rm或者module unload删除的时候就直接说明删除的工具、库就可以了，后面不需要带版本号。 全局使用由于 module 的特性问题，如果在公司内使用，你可能需要所有的使用人员设置一个统一的初始脚本，无论是 bash 还是 csh，通常我们建议建立一个用户可读的统一脚本文件，然后 link 到每个使用人员的家目录下的初始脚本。 例如我们建立为 csh 建立一个统一的 csh.cshrc 文件。Link 给 qianj ln -s csh.cshrc /home/qianj/.cshrc 我们还可以在初始脚本中加入 source ./cshrc.own 那么用户只需要在家目录创建一个 cshrc.own 的文件所谓个性化脚本文件即可。 本文来源于网络，结合李艳青、张长瑞以及qianj生产环境中的使用 课程中心Qianj.51CTO","link":"/clqvrhwvo0000akyj18pu3agp.html"},{"title":"artisan的sparc架构环境","text":"解决方案在centos7里使用qemu创建solaris8 qemu-system-sparc -M SS-5 -m 256 -drive file=/solaris/sparc.qcow2,bus=0,unit=0,media=disk -net nic -net tap -display vnc=:0 课程中心Qianj.51CTO","link":"/clqvt01ot0000psyjc07zfc5m.html"},{"title":"挂载的NFS目录经常‘卡’","text":"环境centos 7.x 问题通过nfsstat -m查看发现NFS使用的vers=4.1版本，通过dmesg | grep -i nfs也可以看到很多如下信息nfs: server 192.168.11.62 not responding,still tryingNFS: nfs4_reclaim_open_state:Lock reclaim failed! 解决方案yum update到centos7.9重启系统修改/etc/fstab中挂载的NFS卷，使用vers=4.0版本 1192.168.11.xx:/proj /proj nfs defaults,vers=4.0 0 0 课程中心Qianj.51CTO","link":"/clqvwstqr000008yjb2cj0ohb.html"},{"title":"一起EDA工具安装在NFS引发的错案","text":"系统环境变量1234567export CDS_LIC_FILE=5284@172.11.0.91export INCISIVDIR=/data/eda/cadence/INCISIV152111export VRST_HOME=$INCISIVDIRexport LD_LIBRARY_PATH=$INCISIVDIR/tools.lnx86/lib:$LD_LIBRARY_PATHexport SPECMAN_HOME=$INCISIVDIR/components/snexport SPECMAN_DIR=$SPECMAN_HOME/export PATH=$INCISIVDIR/bin:$INCISIVDIR/tools.lnx86/bin:$INCISIVDIR/tools.lnx86/dfII/bin:$PATH 执行simvision 报错如下1234simvision: 15.20-p001: (c) Copyright 1995-2016 Cadence Design Systems, Inc.Application initialization failed: Can't find a usable init.tcl in the following directories: /vobs/dvgui/src/tcltk/instdir.build/lib/tcl8.4 /data/eda/cadence/INCISIV152111/tools.lnx86/simvision/lib/tcl8.4 /data/eda/cadence/INCISIV152111/tools.lnx86/lib/tcl8.4 /data/eda/cadence/INCISIV152111/tools.lnx86/simvision/library /data/eda/cadence/INCISIV152111/tools.lnx86/library /data/eda/cadence/INCISIV152111/tools.lnx86/tcl8.4.19/library /data/eda/cadence/INCISIV152111/tcl8.4.19/library /vobs/dvgui/src/tcltk/instdir.build/lib/tcl8.4 如果将此文件夹复制到本地/opt目录下，则不会报错 解决方案有3个方法可以处理这个问题1、将simvision的位置定义到 bin/64bit 下2、simvision -64BIT3、setenv CDS_AUTO_64BIT ALL 原因此问题在于32位软件inode的问题。现在的存储容量都很大，使用inode64，32位的软件无法查找到索引数过大的文件。 本文来源于网络，张长瑞解答 课程中心Qianj.51CTO","link":"/clqvzcck00000s4yj225c1o6c.html"},{"title":"License server system does not support this version of this feature","text":"背景说明verdi版本T-2022.06scl版本2022.12 异常处理第一次启动verdi软件时，提示如下在Synopsys.src文件添加如下信息 1INCREMENT VERDI-ULTRA snpslmd 2019.2019 31-dec-2024 99 VENDOR_STRING=^1+S&amp;PID=214a307a&amp; SUPERSEDE ISSUED=01-apr-2004 ck=51 SN=RK:2671-0:167603:0 START=01-apr-2004 AUTH={ snpslmd=(LK=0) } 进行和谐后，第二次启动verdi软件，提示如下15:35:45 (snpslmd) DENIED: &quot;Verdi&quot; root@wds069 [wds069root34113996] &quot;v2020.06&quot;(License server system does not support this version of this feature. (-25,334))15:35:45 (snpslmd) DENIED: &quot;VERDI-ULTRA&quot; root@wds069 [wds069root34113996] &quot;v2020.06&quot;(License server system does not support this version of this feature. (-25,334))修改刚才在Synopsys.src中添加的信息，修改为如下 1INCREMENT VERDI-ULTRA snpslmd 2022.2019 31-dec-2024 99 VENDOR_STRING=^1+S&amp;PID=214a307a&amp; SUPERSEDE ISSUED=01-apr-2004 ck=51 SN=RK:2671-0:167603:0 START=01-apr-2004 AUTH={ snpslmd=(LK=0) } 重新和谐，第三次启动verdi软件，OK了 课程中心Qianj.51CTO","link":"/clqw2o9ck0000a8yjfe7s8nnb.html"},{"title":"linux下解压rar、zip、7z、tar包","text":"rar包解压rarlinux-xxx.tar.gz包后进入目录make; make install使用rar x filename进行解包 zip包unzip -o xxx.zip -d xxx/ 将xxx.zip解压到当前xxx目录下 7z包yum install p7zip p7zip-plugins.x86_64 -y使用7z x xxx.7z进行解包 tar包tar xf xxx.tartar zxf xxx.tar.gztar zxf xxx.tgz如果遇到多个分包，如xxx.tar.gz00，xxx.tar.gz01，xxx.tar.gz02……先使用cat xxx.tar.gz* &gt;&gt; xxx.tar.gz然后使用tar -zxf xxx.tar.gz解包 课程中心Qianj.51CTO","link":"/clqw3t3590000nsyj7zd73om4.html"},{"title":"自动封禁多次ssh fail的IP","text":"查看ssh失败的IP和对应的次数 1cat /var/log/secure |awk '/Failed/{print$(NF-3)}'|sort|uniq -c 脚本secure_ssh.sh 123456789101112131415$ vim /etc/shell/secure_ssh.sh#!/bin/bashawk '/Failed/{print $(NF-3)}' /var/log/secure|sort|uniq -c|awk '{print $2 &quot;=&quot; $1}' &gt; /etc/shell/limit_ssh.txtDEFINE=&quot;6&quot;for i in `cat /etc/shell/limit_ssh.txt`do IP=`echo $i |awk -F= '{print $1}'` NUM=`echo $i|awk -F= '{print $2}'` if [ $NUM -gt $DEFINE ]; then grep $IP /etc/hosts.deny &gt; /dev/null if [ $? -gt 0 ]; then echo &quot;sshd:$IP:deny&quot; &gt;&gt; /etc/hosts.deny fi fidone 赋权并写加入定时任务 123chmod +x /etc/shell/secure_ssh.sh$ crontab -e*/5 * * * * /etc/shell/secure_ssh.sh &gt; /dev/null 2&gt;&amp;1 本文来源于网络，有所改动 课程中心Qianj.51CTO","link":"/clqw4ukie0000l0yj9x4r1tnw.html"},{"title":"Centos7 Gnome桌面禁止切换用户、注销和锁屏","text":"没有实测，本文仅供参考。 禁止logout、切换用户及锁屏进入 /etc/dconf/db/local.d 目录，没有则自行创建，创建 00-logout 文件，内容如下 1234[org/gnome/desktop/lockdown]disable-log-out=truedisable-user-switching=truedisable-lock-screen=true 进入 /etc/dconf/db/local.d/locks/ 目录，，没有则自行创建，创建 lockdown 文件，内容如下 123/org/gnome/desktop/lockdown/disable-log-out/org/gnome/desktop/lockdown/disable-user-switching/org/gnome/desktop/lockdown/disable-lock-screen 最后执行dconf update更新设置。更新完这两项后，点击 gnome 桌面右上角图标，将不再显示用户操作项及锁屏选项，如下 禁用logout命令logout 命令为 shell 自带命令，使用 which 无法查找，也就无法使用 700 权限控制使用 123[root@wds069 ~]# which logout/usr/bin/which: no logout in (/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)[root@wds069 ~]# 这里我们需要用到 enable 命令来控制内置命令enable -n logout执行这条命令后，我们再执行 logout，提示如下logoutbash: logout: command not found...至此，Gnome 下就完全禁用了切换用户、退出、锁屏的功能。 禁用重启、关机功能对于 reboot、shutdown 命令，因为不属于内置命令，可以使用 chmod 700 的方式来解决。用 which 查找下这两个命令的位置并设置权限即可。 1234567891011[root@wds069 ~]# which reboot/usr/sbin/reboot[root@wds069 ~]# which poweroff/usr/sbin/poweroff[root@wds069 ~]# which shutdown/usr/sbin/shutdown[root@wds069 ~]# [root@wds069 ~]# chmod 700 /usr/sbin/reboot[root@wds069 ~]# chmod 700 /usr/sbin/shutdown[root@wds069 ~]# chmod 700 /usr/sbin/poweroff 为防止用户使用 systemctl reboot -i 的方式强制重启，我们直接禁止普通用户使用 systemctl 命令即可 1234[root@wds069 ~]# which systemctl/usr/bin/systemctl[root@wds069 ~]# [root@wds069 ~]# chmod 700 /usr/bin/systemctl 本文来源于网络，作者张长瑞 课程中心Qianj.51CTO","link":"/clqw6c6lx0000ooyjan81aj5i.html"},{"title":"rm进程hang住导致服务器卡","text":"反馈某IC运算服务器卡，实测cat都无法打开文件（/proj项目目录下） 环境：使用DELL ME4024做的NFS服务端（/proj）系统：Centos7.9 （3.10.0-1160.53.1.el7.x86_64） 查看系统状态发现PID 57831 异常（对应操作是rm -rf xxx/），怀疑此进程hang住导致。尝试pkill，kill，kill -9包括killall该用户（用户被踢出，但是进程依然坚挺），均无效。。。在Linux环境下，有时候使用kill -9命令无法结束一个进程。这主要是由于SIGKILL信号是一个不可屏蔽信号，无法被阻塞或忽略。所以，如果该进程正在执行一些系统操作，比如I/O操作或网络操作，就会导致该进程无法被终止。 尝试进入/proc/57831/目录下查看status，查看其PPid，欲将其PPid杀掉，可以看到name是rm，PPid是1。。。 最终处理，重启大法！顺道修改了下/proj所使用的NFS版本为4.0，可通过nfsstat -m查看。 课程中心Qianj.51CTO","link":"/clqx7admq0000twyj09zb5syz.html"},{"title":"EDA工具QT报错DEBUG","text":"coreConsultant报错类似如下 12Error: could not open command log file &quot;/usr/lib64/qt5/plugins/platforms/rt_shel_command.log&quot; (CMD-015)Fatal: This application failed to start because no Qt plaform plugin could be initialized. Reinstalling the application may fix this problem 报错关于QT的，通过rpm -qa |grep -i qt查看QT相关的包。打开QT的DEBUG功能setenv QT_DEBUG_PLUGINS 1启动coreConsultant，正常如下 而上面的QT异常会查看到error while loading shared libraries: libxkbcommon-x11.so.0: cannot open shared object file: No such file or directory可以清楚的看到缺少libxkbcommon-x11.so.0进行如下安装 1234yum search libxkbcommon-x11libxkbcommon-x11.i686 : X.Org X11 XKB keymap creation librarylibxkbcommon-x11.x86_64 : X.Org X11 XKB keymap creation libraryyum install libxkbcommon-x11.x86_64 再次启动，正常。 课程中心Qianj.51CTO","link":"/clqx82vwp0000pgyjh5gve4n9.html"},{"title":"ICCAD IC设计流程及EDA工具（转）","text":"作为一个初入门者的学习笔记，本文多处文本和附图来源于网络，在此不一一注明，感谢原作者。由于本人才疏学浅，有理解错误或描述谬误的地方，请专家批评指正，不胜感激。另外，如非单独指出，本文中的 “IC 设计流程” 均为 “数字设计流程”。 下图是一个 IC 设计全流程的架构图，它的主线是 “ASIC 设计与实现”，为实现这一目的，在考虑到诸如速度和功耗等等 “性能指标” 的前提下，在各个设计环节实现的同时做好 “功能验证” 工作，以保证所有设计环节的 quality。 从逻辑实现还是物理实现这两部分来看，IC 设计流程可以笼统地分为前端和后端两部分。不同的公司有不同差别细微的区分方法，从比较全面的角度来看，我们可以把 IC 设计的完整流程区分为如下几部分。 确定项目需求一般由项目 PM 来完成，先做市场调研以确定项目需求，对系统功能和能效参数给出指导意见。 系统架构设计一般由系统架构师完成，确定系统功能细节，定义频率、功耗等参数指标，做顶层的系统仿真模拟，以确定一个可行的芯片设计方案。 前端设计前端设计（front-end）一般包括 RTL 代码实现和功能仿真。 中端设计中端设计（mid-end）一般囊括了从功能仿真到物理实现中间所有的环节，包括综合（synthesis），形式验证（formal verification），低功耗设计（low power design），可测试性设计（design for test），STA 等。简单起见，很多公司也把中端设计归到前端设计的范畴里面。 后端设计后端设计（back-end）包括布局布线，形式验证，后仿真等。 其中，前端和中端的设计流程如下所示。前端从编写 RTL 代码开始，中端的最终交付产品为 netlist。 后端的设计流程如下所示。后端的输入为 netlist，最终输出为 GDSII 格式的文件，交由芯片制造商流片。 那么在不同的 IC 设计流程，各家 EDA 厂商有哪些主流的 EDA 工具来辅助设计实现呢？有一些 EDA 工具经历过一些大的版本迭代和合并升级，名字会有所不同，有不准确的地方请指正。 之所以给 cadence 列出这么多产品，并不是说它的 EDA 工具在每个流程环节都占有主要的市场地位，主要是说明它有比较全的全流程工具链，其中 Virtuoso 具有绝对的市场地位，Innovus 和 Liberate 具有领先的市场地位，Spectre 和 Tempus 也有相当的用户。相比较而言，synopsys 的 EDA 工具在数字电路设计的流程中更具有优势，Dc、Pt 和 Formality 具有绝对的市场地位，ICC2 和 Hspice 具有领先的市场地位，VCS 和 DFTCompiler 也被广泛应用。Mentor 的部分点工具则十分出色，比如 Tessent 和 Calibre，这也是非常难能可贵的。 那么每个 IC 设计环节可以用什么 EDA 工具来实现，系列的 EDA 工具（Vendor 称之为全家桶）是如何相互搭配来完成全流程设计的呢？下面以 C 家的工具为例来说明。部分名词解释：HLS ： High-level synthesis，高层次综合。LEC ： Logic equivalence check， 逻辑等价性检查。ECO ： Engineer changing order，技术更改指令，可以通过修改 netlist 或者物理实现以修正小的逻辑错误。DRC ： Design rule check，设计规则检查，检查版图是否符合工艺规范。LVS ： Layout versus schematic，一致性检查，保证原理图和版图的一致性。 C 家在前端提供了 Stratus 这款高层次综合平台（HLS，high-level synthesis），Genus 用作综合（synthesis），Joules、Conformal 和 Modus 分别用在功率分析、逻辑等价性检查、逻辑修正及自动测试逻辑插入等。从受欢迎程度来看，C 家的 EDA 工具在数字前端有些弱。 Innovus 作为当家产品则为后端提供强大的布局布线功能，应用于时序和功耗和 Tempus 和 Voltus 也可圈可点，Quantus、PVS 和 DFM 则分别用在寄生参数提取，物理验证和可制造性设计。 由此可见，C 家可以提供数字全流程的全家桶，据悉，有些公司就会直接采购 C 家的全家桶用于 IC 设计，不同工具使用的交互兼容性上会更好一些。而大规模一些的公司，则会选择每个设计环节最主流的 EDA 工具以保证更高的精度和速度，以确定获取更加 golden 的结果。 课程中心Qianj.51CTO","link":"/clqxcigy5000084yjdb0f0udc.html"},{"title":"常用EDA工具lic变量配置","text":"通用的 License 调用环境变量配置：LM_LICENSE_FILE 不同厂家的变量配置 Ansys：ANSYSLMD_LICENSE_FILE Cadence: CDS_LIC_FILE ARM: ARMLMD_LICENSE_FILE Synopsys: SNPSLMD_LICENSE_FILE Xilinx: XILINXD_LICENSE_FILE 概伦电子: PPDSLMD_LICENSE_FILE License 调用写法，以 LM_LICENSE_FILE 为准setenv LM_LICENSE_FILE 27000@server1:5280@server1也可以写成setenv SNPSLMD_LICENSE_FILE 27000@server1setenv CDS_LIC_FILE 5280@server1 课程中心Qianj.51CTO","link":"/clqxdg92s0000zwyj8fvocbxl.html"},{"title":"virtuoso提示x11 connection rejected because of wrong authentication","text":"virtuoso提示x11 connection rejected because of wrong authentication，如下图 查看磁盘利用，如下图 通知其清理home目录后，查看其空间再启动virtuoso正常。 课程中心Qianj.51CTO","link":"/clqxf75p30000tkyjbl1l5j7u.html"},{"title":"linux下查看office、PDF","text":"查看office123456789101112$ yum install libreoffice$ libreoffice xxx.doc$ rpm -qa | grep office$ man libreoffice$ libreoffice --help$ libreoffice --writer # 启动文字处理器$ libreoffice --calc # 启动一个空的电子表格$ libreoffice --draw # 启动一个空的绘图文档$ libreoffice --web # 启动一个空的 HTML 文档$ libreoffice --writer --nologo #可以在不显示启动屏幕的情况下启动 LibreOffice$ libreoffice --writer -n example.odt #-n将任何文档设为模板 查看PDFyum install evinceevince qianj.pdffirefox qianj.pdf 课程中心Qianj.51CTO","link":"/clqyjelih0000igyj2nem1dl8.html"},{"title":"virsh命令","text":"virsh 命令 12345678910111213virsh list # 列出所有运行的虚拟机 virsh list --all # 列出所有虚拟机 virsh hostname # 列出真机主机名virsh sysinfo # 列出真机的详细信息virsh nodecpustats # 得到真机cpu状态virsh nodememstats # 得到真机内存状态virsh node-memory-tune # 允许你设置的node内存参数virsh capabilities # 打印虚拟机的特点virsh freecell # 打印虚拟机中可用内存virsh shutdown dns # 关闭虚拟机dnsvirsh start dns # 启动虚拟机dnsvirsh dumpxml dns &gt; dns.xml # 导出dns虚拟机的配置文件 123456789101112131415161718virsh --help #查看命令帮忙virsh list #显示正在运行的虚拟机virsh list --all #显示所有的虚拟机virsh start vm-node1 #启动vm-node1虚拟机virsh shutdown vm-node1 #关闭vm-node1虚拟机virsh destroy vm-node1 #虚拟机vm-node1强制断电virsh suspend vm-node1 #挂起vm-node1虚拟机virsh resume vm-node1 #恢复挂起的虚拟机virsh undefine vm-node1 #删除虚拟机，慎用virsh dominfo vm-node1 #查看虚拟机的配置信息virsh domiflist #查看网卡配置信息virsh domblklist vm-node1 #查看该虚拟机的磁盘位置virsh edit vm-node1 #修改vm-node1的xml配置文件virsh dumpxml vm-node1 #查看KVM虚拟机当前配置virsh dumpxml vm-node1 &gt; vm-node1.bak.xml #备份vm-node1虚拟机的xml文件，原文件默认路径/etc/libvirt/qemu/vm-node1.xmlvirsh autostart vm-node1 #KVM物理机开机自启动虚拟机，配置后会在此目录生成配置文件/etc/libvirt/qemu/autostart/vm-node1.xmlvirsh autostart --disable vm-node1 #取消开机自启动virsh console vm-node1 #进入虚拟机 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;domain type='kvm' id='13'&gt; &lt;name&gt;demo-guest1&lt;/name&gt; &lt;uuid&gt;409fc837-ef54-48c9-9a47-c62fe383d33d&lt;/uuid&gt; &lt;!-- guset可以使用的最大内存，以KB为单位 --&gt; &lt;memory unit='KiB'&gt;2097152&lt;/memory&gt; &lt;!-- guest启动时内存，可以通过virsh setmem来调整内存，但不能大于最大可使用内存 --&gt; &lt;currentMemory unit='KiB'&gt;2097152&lt;/currentMemory&gt; &lt;!-- 分配的虚拟cpu --&gt; &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt; &lt;resource&gt; &lt;partition&gt;/machine&lt;/partition&gt; &lt;/resource&gt; &lt;os&gt; &lt;type arch='x86_64' machine='pc-i440fx-rhel7.0.0'&gt;hvm&lt;/type&gt; &lt;boot dev='hd'/&gt; &lt;/os&gt; &lt;features&gt; &lt;acpi/&gt; &lt;apic/&gt; &lt;!-- 处理器特性 --&gt; &lt;/features&gt; &lt;cpu mode='custom' match='exact' check='full'&gt; &lt;model fallback='forbid'&gt;Skylake-Server-IBRS&lt;/model&gt; &lt;feature policy='require' name='md-clear'/&gt; &lt;feature policy='require' name='spec-ctrl'/&gt; &lt;feature policy='require' name='ssbd'/&gt; &lt;feature policy='require' name='hypervisor'/&gt; &lt;feature policy='disable' name='arat'/&gt; &lt;/cpu&gt; &lt;!-- 时钟, 使用本地时间: utc --&gt; &lt;clock offset='utc'&gt; &lt;timer name='rtc' tickpolicy='catchup'/&gt; &lt;timer name='pit' tickpolicy='delay'/&gt; &lt;timer name='hpet' present='no'/&gt; &lt;/clock&gt; &lt;!-- 定义了在kvm环境中crash时的默认的动作分别为destroy和restart。 destroy：停止该虚拟机。相当于关闭电源。 restart: 重启虚拟机 --&gt; &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt; &lt;on_reboot&gt;restart&lt;/on_reboot&gt; &lt;on_crash&gt;destroy&lt;/on_crash&gt; &lt;pm&gt; &lt;suspend-to-mem enabled='no'/&gt; &lt;suspend-to-disk enabled='no'/&gt; &lt;/pm&gt; &lt;!-- 设备定义开始 --&gt; &lt;devices&gt; &lt;!-- 模拟器，此处路径为qemu-kvm绝对路径 --&gt; &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt; &lt;!-- 用于kvm启动或者存储的文件,启动设备为：/image/UCarApp1/UCarApp1_clone-disk1.raw --&gt; &lt;disk type='file' device='disk'&gt; &lt;driver name='qemu' type='raw'/&gt; &lt;source file='/image/UCarApp1/UCarApp1_clone-disk1.raw'/&gt; &lt;backingStore/&gt; &lt;target dev='vda' bus='virtio'/&gt; &lt;!-- 可通过--disk 修改磁盘总线类型为ide --disk UCarApp1_clone-disk1.raw,bus=ide --&gt; &lt;alias name='virtio-disk0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/&gt; &lt;/disk&gt; &lt;controller type='usb' index='0' model='ich9-ehci1'&gt; &lt;alias name='usb'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x7'/&gt; &lt;/controller&gt; &lt;controller type='usb' index='0' model='ich9-uhci1'&gt; &lt;alias name='usb'/&gt; &lt;master startport='0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0' multifunction='on'/&gt; &lt;/controller&gt; &lt;controller type='usb' index='0' model='ich9-uhci2'&gt; &lt;alias name='usb'/&gt; &lt;master startport='2'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x1'/&gt; &lt;/controller&gt; &lt;controller type='usb' index='0' model='ich9-uhci3'&gt; &lt;alias name='usb'/&gt; &lt;master startport='4'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x2'/&gt; &lt;/controller&gt; &lt;controller type='pci' index='0' model='pci-root'&gt; &lt;alias name='pci.0'/&gt; &lt;/controller&gt; &lt;controller type='virtio-serial' index='0'&gt; &lt;alias name='virtio-serial0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/&gt; &lt;/controller&gt; &lt;!-- 采用普通的驱动，即硬盘和网卡都采用默认配置情况下，网卡工作在 模拟的rtl 8139 网卡下，速度为100M 全双工。采用 virtio 驱动后，网卡工作在 1000M 的模式下 --&gt; &lt;interface type='bridge'&gt; &lt;mac address='52:54:00:bc:1b:74'/&gt; &lt;source bridge='br0'/&gt; &lt;target dev='vnet6'/&gt; &lt;model type='virtio'/&gt; &lt;alias name='net0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/&gt; &lt;/interface&gt; &lt;serial type='pty'&gt; &lt;source path='/dev/pts/11'/&gt; &lt;target type='isa-serial' port='0'&gt; &lt;model name='isa-serial'/&gt; &lt;/target&gt; &lt;alias name='serial0'/&gt; &lt;/serial&gt; &lt;console type='pty' tty='/dev/pts/11'&gt; &lt;source path='/dev/pts/11'/&gt; &lt;target type='serial' port='0'/&gt; &lt;alias name='serial0'/&gt; &lt;/console&gt; &lt;channel type='unix'&gt; &lt;source mode='bind' path='/var/lib/libvirt/qemu/channel/target/domain-13-demo-guest1/org.qemu.guest_agent.0'/&gt; &lt;target type='virtio' name='org.qemu.guest_agent.0' state='disconnected'/&gt; &lt;alias name='channel0'/&gt; &lt;address type='virtio-serial' controller='0' bus='0' port='1'/&gt; &lt;/channel&gt; &lt;!-- 输入设备 --&gt; &lt;input type='tablet' bus='usb'&gt; &lt;alias name='input0'/&gt; &lt;address type='usb' bus='0' port='1'/&gt; &lt;/input&gt; &lt;!-- 输入设备 --&gt; &lt;input type='mouse' bus='ps2'&gt; &lt;alias name='input1'/&gt; &lt;/input&gt; &lt;input type='keyboard' bus='ps2'&gt; &lt;alias name='input2'/&gt; &lt;/input&gt; &lt;!-- 定义与guset交互的图形设备。在这个例子中，使用vnc协议。listen的地址为0.0.0.0的地址。prot为5903,通过以下的命令查找端口号: virsh vncdisplay guestName --&gt; &lt;graphics type='vnc' port='5903' autoport='yes' listen='0.0.0.0'&gt; &lt;listen type='address' address='0.0.0.0'/&gt; &lt;/graphics&gt; &lt;video&gt; &lt;model type='cirrus' vram='16384' heads='1' primary='yes'/&gt; &lt;alias name='video0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/&gt; &lt;/video&gt; &lt;memballoon model='virtio'&gt; &lt;alias name='balloon0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/&gt; &lt;/memballoon&gt; &lt;rng model='virtio'&gt; &lt;backend model='random'&gt;/dev/urandom&lt;/backend&gt; &lt;alias name='rng0'/&gt; &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/&gt; &lt;/rng&gt; &lt;!-- 设备定义结束 --&gt; &lt;/devices&gt; &lt;seclabel type='dynamic' model='selinux' relabel='yes'&gt; &lt;label&gt;system_u:system_r:svirt_t:s0:c47,c808&lt;/label&gt; &lt;imagelabel&gt;system_u:object_r:svirt_image_t:s0:c47,c808&lt;/imagelabel&gt; &lt;/seclabel&gt; &lt;seclabel type='dynamic' model='dac' relabel='yes'&gt; &lt;label&gt;+107:+107&lt;/label&gt; &lt;imagelabel&gt;+107:+107&lt;/imagelabel&gt; &lt;/seclabel&gt;&lt;/domain&gt; 课程中心Qianj.51CTO","link":"/clqyymp8j0000owyjfp8rhc7d.html"},{"title":"python相关配置","text":"配置国内镜像pip清华源临时 1234# 清华源pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &lt;some-package&gt;# 阿里云源pip install -i https://mirrors.aliyun.com/pypi/simple/ &lt;some-package&gt; 设为默认 123456# 升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置pip install pip -U# 清华源pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple# 阿里云源pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ conda清华源参考链接 https://mirror.tuna.tsinghua.edu.cn/help/anaconda/临时 1conda install -c https://mirrors.tuna.tsinghua.edu.cn/anaconda &lt;package_name&gt; 设为默认Linux / Windows 系统: 在~/.condarc中填入源。可以从下面选择北外源或者清华源。 北外源 1234567891011121314151617channels: - defaultsshow_channel_urls: truechannel_alias: https://mirrors.bfsu.edu.cn/anacondadefault_channels: - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud 清华源 1234567891011121314151617channels: - defaultsshow_channel_urls: truechannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anacondadefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 创建虚拟环境conda首推的虚拟环境管理工具. 使用 conda 来安装包(而非 pip)查找库的链接: https://anaconda.org/注意 conda 源的python包和pip源的python包是不通用的, 有事可以混合安装, 但容易出现依赖错误.(有时候涉及到一些C++库如cuda的时候, 或者一些只在pip中存在的库需要同时用两种工具安装包的时候, 可能会出现各种奇怪的依赖错误导致环境创建失败.) 12345678910111213141516171819# 创建 conda 环境conda create -n OpenCV-4.2.0-py3# 激活 conda 环境# For linuxsource activate OpenCV-4.2.0-py3# For windowsactivate OpenCV-4.2.0-py3# 在虚拟环境中安装 python 包conda install numpy# 虚拟环境中尽量不使用pip, 除非万不得已. pip和conda安装的包的兼容性很差.pip install numpy# 退出虚拟环境# For linuxsource deactivate# For windowsdeactivate virtualenvconda 安装环境不成功的第二选择.virtualenv也是个python的第三方库, 用于管理虚拟环境, 但仍然使用pip来安装包. 1234567891011# 需要先在默认环境中安装该库pip install virtualenv# 创建一个独立的 python 环境. 这样就在当前目录下创建了一个venv文件夹, 其中包含了一个最小的pythonvirtualenv venv# 也可以指定 python 版本virtualenv venv -p python3.6# 激活环境source venv/bin/activate 环境的导出和安装pip12345# 导出库到文件pip freeze &gt; requirements.txt# 从文件中安装库pip install -r requirements.txt conda12345# 导出库到文件conda list -e &gt; requirements.txt# 从文件中安装库conda install --file requirements.txt 上面的安装方法仅限于常规安装.有一些第三方channel和pip安装的库无法用此法安装, 只能导出. 为此, 我们可以选择导出整个环境. 12345# 导出环境到文件conda env export &gt; env.yml# 从文件创建环境conda env create -f env.yml python资料中文译本https://python3-cookbook.readthedocs.io/zh-cn/latest/index.html 课程中心Qianj.51CTO","link":"/clqz10lg000005gyjbitw3ita.html"},{"title":"ubuntu 22.04（jammy）使用教程","text":"查看系统信息 查看CPU信息1234567891011# CPU型号cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c# 物理 CPU 个数cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l# CPU核数 (物理CPU个数 * 每个CPU的核数)cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq# 逻辑CPU个数 (物理CPU个数 * 每个CPU的核数 * 超线程数)cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l 查看操作系统信息123456789101112# 查看操作系统内核信息uname -a# 查看操作系统发行版本cat /etc/issuelsb_release -a# 查看hostnamehostname# 网卡信息ip a 安装的字体12345# 所有字体fc-list# 中文字体fc-list :lang=zh 配置源使用 vim 编辑 /etc/apt/sources.list 文件, 注释掉原来所有的内容, 新增以下源 浙大源1234deb https://mirrors.zju.edu.cn/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.zju.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.zju.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb https://mirrors.zju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse 阿里源1234deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse 网络配置 如果使用 Ubuntu Desktop, 那么联网可以通过 GUI 的方式填写 IP 等信息. 如果使用 Ubuntu Server, 那么有两种网络管理工具, netplan 和 NetworkManager 如果通过动态 IP 联网, 则什么也不需要配置 如果只配置静态 IP , 则使用 netplan 或者 NetworkManager 均可, 推荐前者 使用 netplan 联网编辑 /etc/netplan/*.yaml 文件（在不同的系统中可能有不同的文件名）, 写入以下内容: 1234567891011121314# This is the network config written by 'subiquity'network: ethernets: eno1: # 网卡名称, 需要填写自己机器的, 通过 `ip a` 命令查看, addresses: [192.168.1.2/24] # 静态 IP 地址, 斜杠后面的是子网掩码, 24 表示 24 个 1, 即 255.255.255.0 gateway4: 192.168.1.1 # 网关地址, 在 22.04 版本中不再需要这一行, 只需要指定下面的路由网关地址即可 nameservers: addresses: [8.8.8.8] # DNS 服务器地址 routes: - to: 0.0.0.0/0 # 路由目标地址 via: 192.168.1.1 # 路由网关地址 metric: 0 renderer: networkd # 网络服务, networkd 和 NetworkManager 二选一, 使用 netplan 时需要指定为 networkd version: 2 使用以下命令应用配置 12345# 检查配置的正确性sudo netplan try# 应用配置sudo netplan apply 使用 NetworkManager 联网NetworkManager (简称 NM) 是另一种网络管理工具, 它支持更复杂的配置, 特别是 L2TP VPN.我们首先介绍配置静态 IP 的方法.使用 NM 之前, 我们修改 /etc/netplan/*.yaml 文件使用 NM 管理网络: 1234# This is the network config written by 'subiquity'network: renderer: NetworkManager version: 2 然后编辑 /etc/NetworkManager/NetworkManager.conf, 修改为 managed=true 12345678[main]plugins=ifupdown,keyfile[ifupdown]managed=true[device]wifi.scan-rand-mac-address=no 配置修改后我们需要重启网络服务 1sudo systemctl restart NetworkManager NetworkManager 使用命令行工具 nmcli 来管理配置. 有关 nmcli 的使用方法, 可以参考 nmcli –help 查看. 接下来通过创建配置文件: 1sudo nmcli c add type ethernet con-name wired ifname eno1 ipv4.addr 192.168.1.2/24 ipv4.gateway 192.168.1.1 ipv4.method manual 其中 wired 为自定义的连接名称,eno1 为网卡名称 (需要填写自己的).注意修改自己的 IP 地址, 子网掩码和网关.然后就会有个新的文件 /etc/NetworkManager/system-connections/wired.nmconnection 创建出来.接下来我们编辑该文件, 并使得最终内容如下 (注意 uuid 值使用原本的就可以): 12345678910111213141516171819202122232425[connection]id=wireduuid=5de8cdc3-0595-4739-bf43-24f4ec666976 # 使用原来创建的默认值即可type=ethernet # 有线网autoconnect-priority=-998interface-name=eno1 # 网卡名称permissions=timestamp=1644651104[ethernet]mac-address-blacklist=[ipv4]address1=192.168.1.2/24,192.168.1.1 # IP 地址, 子网掩码和网关dns=8.8.8.8; # DNS 服务器地址dns-search=ignore-auto-dns=truemethod=manual[ipv6]addr-gen-mode=stable-privacydns-search=method=auto[proxy] 完成后启动该配置 1234567sudo nmcli connection up wired# 可以使用缩写 c 代表 connection, nmcli --help 见详细用法sudo nmcli c up wired# 查看当前的配置nmcli c 如果需要配置 L2TP VPN, 则必须选择 NetworkManager首先安装该模块12345# ubuntu server/desktop 需要安装sudo apt install network-manager-l2tp# ubuntu desktop 需要安装sudo apt install network-manager-l2tp-gnome 使用ubuntu desktop新建 L2TP VPN Name: ZJUVPNGateway:User name: &lt;用户名&gt;Password: &lt;密码&gt;PPP Settings:勾选 Allow BSD data compression勾选 Allow Deflate data compression取消勾选 Use TCP header compression取消勾选 User protocol field compression negotiation取消勾选 Use Address/Control compression 希望开机后可以自动连接 VPN运行 nm-connection-editor 打开网络连接编辑面板,从 Ethernet(以太网) 列表中选择所使用的有线网或者从WLAN列表中选择所使用的无线网, 双击打开编辑面板,在 General(常规) 选项卡中勾选 Automatically connect to VPN when using this connection(使用此连接时自动连接到VPN), 并选择要开启的 VPN 使用ubuntu server需要在终端中配置 VPN. 使用以下命令新建一个连接1sudo nmcli c add connection.id ZJUVPN type vpn vpn-type l2tp 其中 ZJUVPN 为自定义 VPN 名称.然后编辑文件 /etc/NetworkManager/system-connections/ZJUVPN.nmconnection1234567891011121314151617181920212223242526272829303132[connection]id=ZJUVPNuuid=1fe18117-cbca-4f3e-9f3d-80664859b2f2 # 使用原来创建的默认值即可type=vpn # 连接类型为 vpnautoconnect=falsepermissions=timestamp=1593424178[vpn]gateway=&lt;vpn_address&gt; # VPN 地址mru=1400mtu=1400no-vj-comp=yesnoaccomp=yesnopcomp=yespassword-flags=0 # 这里设置为 0, 这样密码可以写在配置文件里, 方便自动连接user=&lt;username&gt; # 用户名service-type=org.freedesktop.NetworkManager.l2tp[vpn-secrets]password=&lt;password&gt; # 密码[ipv4]dns-search=method=auto[ipv6]addr-gen-mode=stable-privacydns-search=method=auto[proxy] 启动 VPN 服务1234sudo nmcli c up ZJUVPN# 查看nmcli c 希望开机后可以自动连接 VPN编辑 /etc/NetworkManager/system-connections/wired.nmconnection 文件, 在下面的段落中增加一行 ZJUVPN 的 uuid 号: 123456789[connection]id=wireduuid=5de8cdc3-0595-4739-bf43-24f4ec666976type=ethernetautoconnect-priority=-998interface-name=eno1permissions=secondaries=1fe18117-cbca-4f3e-9f3d-80664859b2f2 # 这里填入 ZJUVPN 的 uuid 号即可.timestamp=1644651104 完成后重启系统。 双网卡设置主节点: 一张网卡设置为外网ip， 另一张设置为内网ip. 内网网卡不设置网关.1234567891011121314network: ethernets: eno1: addresses: [10.76.2.232/21] gateway4: 10.76.0.10 nameservers: addresses: [10.10.0.21] routes: - to: 10.0.0.0/8 via: 10.76.0.1 metric: 0 eno2: addresses: [192.168.0.101/24] version: 2 设置内网的节点可以通过主节点访问外网: 开启ip_forward的内核转发, 重启后有效.1vim /etc/sysctl.conf 其中找到 net.ipv4.ip_forward , 赋值为 1。设置路由表12345Destination Gateway Genmask Flags Metric Ref Use Ifacedefault _gateway 0.0.0.0 UG 0 0 0 eno110.0.0.0 10.76.0.1 255.0.0.0 UG 0 0 0 eno110.76.0.0 0.0.0.0 255.255.248.0 U 0 0 0 eno1192.168.0.0 0.0.0.0 255.255.255.0 U 0 0 0 eno2 由于内网的请求源地址是内网地址, 目标地址是外网地址, 请求返回时外网地址不知道内网地址,因此需要做网络地址转换(network address translation, NAT),把内网地址修改为外网知道的网关地址.数据包返回后目标地址是网关, 需要进一步转换为内网地址.因此需要在 iptables 中添加 NAT 转发规则.12iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o enp1s0 -j MASQUERADE# 该规则的意思是 来自 192.168.1.0/24 经由 enp1s0 的数据包需要做 NAT 转换 还可以使用安卓手机的网络共享功能临时上网. 安卓手机通过数据线连接到 Ubuntu 服务器, 手机移动网络设置中开启 usb 网络共享, 电脑共享手机网络 安装常用工具更新系统, 安装常用工具 12sudo apt update; sudo apt upgradesudo apt install vim, git, curl, tmux, mlocate, net-tools 1 VSCodeUbuntu 20.04 下应用商店里安装的 VSCode 无法输入中文. 此处我们添加微软的apt源来安装(参考https://cyfeng.science/2020/05/20/vs-code-chinese-input/) 123wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -sudo add-apt-repository &quot;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main&quot;sudo apt update &amp;&amp; sudo apt install code 2 卸载自带的火狐浏览器1234# 查找相关软件包dpkg --get-selections | grep firefox# 卸载sudo apt purge firefox firefox-locale-en firefox-locale-zh-hans 3 deepin-win用于安装微信 QQ等记录是基于的Ubuntu18.04.2LTS。 记住这个工程的网址 （https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu），这里面有安装其他软件的详细说明，我们主要根据这个步骤来执行。 1234apt-get install gitgit clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.gitcd deepin-wine-for-ubuntu./install.sh 通过执行上面的命令我们可以很方便的将wine这个工程下载到本地来使用，然后执行shell文件进行安装。 安装托盘，托盘的作用是可以把使用wine打开的软件整合起来，便于管理和通知的查看。 12apt install chrome-gnome-shellapt install gnome-shell-extensions # 扩展 安装QQ 12345cd ..mkdir deepin.qqcd deepin.qqwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/deepin.com.qq.im_8.9.19983deepin23_i386.debsudo dpkg -i deepin.com.qq.im_8.9.19983deepin23_i386.deb 安装软件命令:dpkg -i &lt;.deb file name&gt; 列出与该包先关联的文件命令:dpkg -L package 安装完包后，可以用此命令查看软件安装到什么地方. 显示包的版本命令:dpkg -l package 移除软件（保留配置）命令:dpkg -r package 移除软件（不保留配置）命令:dpkg -P package 查找包的详细信息命令:dpkg -s package 列出deb包的内容命令:dpkg -c package.deb 解开 deb 包的内容:dpkg –unpack package.deb 搜索所属的包内容:dpkg -S keyword 配置包:dpkg –configure package其中QQ所在的镜像是https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/,我们可以根据版本来进行选择。 安装微信 1234567(base) mscg@mscg:~$ mkdir deepin.wechat(base) mscg@mscg:~$ cd deepin.wechat/(base) mscg@mscg:~/deepin.wechat$ wget https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/deepin.com.wechat_2.6.2.31deepin0_i386.deb(base) mscg@mscg:~/deepin.wechat$ sudo dpkg -i deepin.com.wechat_2.6.2.31deepin0_i386.deb 正在选中未选择的软件包 deepin.com.wechat:i386。。。。。。正在处理用于 hicolor-icon-theme (0.17-2) 的触发器 ... Ubuntu 20.04安装后无法通过图标打开. 可以通过安装旧版微信解决该问题.Deepin-WeChat 的中文字体默认用的是”文泉驿微米黑”, 所以在系统里安装该字体即可. 首先从Github仓库（https://github.com/anthonyfok/fonts-wqy-microhei/blob/master/wqy-microhei.ttc） 下载该字体, 然后复制到字体目录病刷新字体缓存: 12sudo cp wqy-microhei.ttc /usr/share/fontsfc-cache -fv 重启微信.如果无法直接粘贴截图，安装 libjpeg62:i386 可解决 1sudo apt install libjpeg62:i386 网易云、WPS、百度网盘都有linux的安装包，直接下载安装docker安装https://docs.docker.com/engine/install/ubuntu/https://docs.docker.com/engine/install/ubuntu/在新主机上首次安装 Docker Engine 之前，您需要 需要设置 Docker 存储库。之后，您可以安装和更新 存储库中的 Docker。a. 设置 Docker 的存储库 12345678910111213# Add Docker's official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curl gnupgsudo install -m 0755 -d /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgsudo chmod a+r /etc/apt/keyrings/docker.gpg# Add the repository to Apt sources:echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update b. 安装 Docker 包若要安装最新版本，请运行 1sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 要安装特定版本的 Docker Engine，首先列出 存储库中的可用版本 123456# List the available versions:apt-cache madison docker-ce | awk '{ print $3 }'5:24.0.0-1~ubuntu.22.04~jammy5:23.0.6-1~ubuntu.22.04~jammy... 选择所需的版本并安装 12VERSION_STRING=5:24.0.0-1~ubuntu.22.04~jammysudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin 通过运行映像来验证 Docker 引擎安装是否成功 12sudo docker run hello-world# 此命令下载测试映像并在容器中运行它。当 容器运行，它打印确认消息并退出。 修改默认文件夹 方法一打开 系统设置-》语言支持 将“english”拖动到最上端，重启系统。重启后，会提示更新文件名称，更新后在将语言”中文“拖动到顶部，重启系统 。 方法二编辑 ~/.config/user-dirs.dirs 文件12345678XDG_DESKTOP_DIR=&quot;$HOME/Desktop&quot;XDG_DOWNLOAD_DIR=&quot;$HOME/Download&quot;XDG_TEMPLATES_DIR=&quot;$HOME/Templates&quot;XDG_PUBLICSHARE_DIR=&quot;$HOME/Public&quot;XDG_DOCUMENTS_DIR=&quot;$HOME/Documents&quot;XDG_MUSIC_DIR=&quot;$HOME/Music&quot;XDG_PICTURES_DIR=&quot;$HOME/Pictures&quot;XDG_VIDEOS_DIR=&quot;$HOME/Videos&quot; 方法三打开终端，在终端中输入命令:12export LANG=en_USxdg-user-dirs-gtk-update 跳出对话框询问是否将目录转化为英文路径,同意并关闭。在终端中输入命令:1export LANG=zh_CN 重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。 ubuntu美化参考文章 https://www.cnblogs.com/feipeng8848/p/8970556.html. 这里摘录一些. 美化工作主要围绕两个主题展开: 修改 Gnome 皮肤: https://www.pling.com/s/Gnome安装 Gnome 插件: https://extensions.gnome.org/这里的 Gnome 是一个 Linux 下的桌面环境, Ubuntu 18.04 使用的是 v3.28; Ubuntu 20.04 使用的是 v3.36. 安装 gnome-tweak-tool 和插件 12sudo apt-get updatesudo apt-get install gnome-tweak-tool 安装完成后, 按 Win 键, 输入 tweak 搜索到 Tweaks 工具 (可以右键添加到收藏, 即固定到任务栏), 打开.此处 Tweaks 在 18.04 和 20.04 版本中略有不同, 但基本功能类似, 主要是用于调整任务栏和系统皮肤等等的属性, 可以自行探索.我们重点推荐几个拓展(Extensions)Tweaks 的拓展是通过浏览器插件来安装的. 首先安装拓展工具: 1sudo apt-get install gnome-shell-extensions 安装完成后打开 Tweaks 的 Extensions 菜单, 可以看到已有的插件.现在我们要安装新的插件, 打开 Gnome 插件网址 https://extensions.gnome.org/, 搜索如下几个插件:a. User Themes: 用于修改系统皮肤b. Dash to Panel: 用于修改任务栏样式c. Topicon plus: 用于 wine, 后面再说安装插件的方法很简单, 只需要打开每个插件页面的开关, 稍等片刻, 会弹出一个对话框, 点击 Install 即可.安装完插件后在 Tweaks 的 Extensions 菜单可以看到. 安装新皮肤Ubuntu 的皮肤包含两部分, 主题和图标.系统已有的主题存放在 /usr/share/themes, 图标存放在 /usr/share/icons 中.我们要做的就是下载新的主题和皮肤, 把他们放入这两个系统文件夹. 首先打开 Gnome 皮肤网站 https://www.pling.com/s/Gnome,点击左侧的 GTK 3/4 Themes 分类, 点击 Rating 标签,选择一款自己喜欢的皮肤, 比如这款 Orchis. 点击 Files 标签,可以看到有多种样式可以选择: 普通样式, 带 dark 后缀的暗黑风, 带 light 后缀的明亮风.任意选择一个, 点击下载按钮, 稍等片刻就会下载一个压缩包 Orchis-light.tar.xz. 12345# 解压tar xvf Orchis-light.tar.xz# 移动到主题文件夹sudo mv Orchis-light /usr/share/themes 再打开 Gnome 皮肤网站, 点击左侧的 Full Icon Themes 分类, 点击 Score 标签,选择一款自己喜欢的图标, 比如这款 McMojave-circle, 任意选择一个图标样式下载. 12345# 解压tar xvf 01-McMojave-circle.tar.xz# 移动到图标文件夹sudo mv McMojave-circle /usr/share/icons 在 Tweaks 的 Apperence 菜单, 我们可以看到 Themes 下面有一系列的皮肤选项,其中 Applications 和 Shell 下就包括我们新增加的 Orchis-light 皮肤,在 Icons 菜单包含新增的 McMojave-circle 图标, 可以自行选择. 修改系统设置1 时间设置修改时区. 时区是从 /etc/localtime 读取的, 而默认这是个软链接, 链接到哪个时区文件就是哪个时区. 1234567891011# 查看时间, 发现时区是 UTC 的date# 删除原有的链接sudo rm /etc/localtime# 新建到上海时区的软链接sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# 再次查看时区, 发现是 CST 即正确date 2 修改Hostname12345# 1. 临时修改为abc, 修改后打开新终端显示, 重启系统失效hostname abc# 2. 永久修改为abc: 修改 /etc/hostname 中的值为 abc# 重启系统 3 开机启动程序开机启动的服务分为两种, 系统服务和用户服务.系统服务使用 root 权限启动, 用户服务使用用户权限启动.在开机后登陆之前, 系统会扫描以下目录的服务并启动: systemd/system 的服务 1234/usr/lib/systemd/system//lib/systemd/system/ (软链接, 实际指向 /usr/lib/systemd/system/)/usr/local/lib/systemd/system/ (默认不存在该目录)/etc/systemd/system/ systemd/user 的服务 1234567/usr/lib/systemd/user//usr/local/lib/systemd/user/ (默认不存在该目录)/usr/share/systemd/user/ (默认不存在该目录)/usr/local/share/systemd/user/ (默认不存在该目录)~/.local/share/systemd/user/ (默认不存在该目录)/etc/systemd/user/~/.config/systemd/user/ (默认不存在该目录) 可以使用 systemctl show --property=UnitPath 命令查看扫描顺序, 优先级从低到高操作系统服务常用的命令 123456789101112131415161718# 启用系统服务sudo systemctl enable xxx.service# 禁用系统服务sudo systemctl disable xxx.service# 查看系统服务状态sudo systemctl status xxx.service# 启动系统服务sudo systemctl start xxx.service# 重启系统服务sudo systemctl restart xxx.service# 停止系统服务sudo systemctl stop xxx.service# 重新加载配置sudo systemctl reload xxx.service# 启用用户服务systemctl --user enable xxx.service# 其余命令类似: disable, status, start, stop 在操作用户服务时, 必须加 –user, 否则会找不到服务, 并且必须去掉 sudo,否则会提示错误 Failed to connect to bus: No such file or directory. 自动运行: rc-local 服务修改服务文件 sudo vim /lib/systemd/system/rc-local.service, 添加最下面的一段话 12345678910111213141516[Unit]Description=/etc/rc.local CompatibilityDocumentation=man:systemd-rc-local-generator(8)ConditionFileIsExecutable=/etc/rc.localAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/etc/rc.local startTimeoutSec=0RemainAfterExit=noGuessMainPID=no#这一段原文件没有，需要自己添加[Install]WantedBy=multi-user.target 这里的 WantedBy=multi-user.target 是把 rc-local.service 加入 multi-user.target 这一启动目标.启用服务 1sudo systemctl enable rc-local.service 该命令实际上是根据我们新添加的依赖关系,建立了 /etc/systemd/system/multi-user.target.wants/rc-local.service 符号链接指向 /lib/systemd/system/rc-local.service.系统在启动时会扫描 multi-user.target.wants 目录并启动其中的服务.添加我们需要自启动命令到 /etc/rc.local 文件中 (与上面的配置中 ExecStart 的文件名对应), 该文件不存在时自己创建一个.要注意这个文件里使用的命令都要写全路径(因为该文件是 root 执行的) 123456#!/bin/bash## rc.local#/usr/local/bin/sslocal -c /home/&lt;username&gt;/tools/ssconfig/config.json -d start 为 rc.local 增加执行权限 1sudo chmod +x /etc/rc.local 重启以测试是否成功. 4 (双系统) 修改开机默认系统打开 grub 文件: sudo vim /etc/default/grub , 内容如下 12345678910111213# If you change this file, run 'update-grub' afterwards to update # /boot/grub/grub.cfg.# For full documentation of the options in this file, see:# info -f grub -n 'Simple configuration'GRUB_DEFAULT=0GRUB_TIMEOUT_STYLE=hiddenGRUB_TIMEOUT=10GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;GRUB_CMDLINE_LINUX=&quot;&quot;...... 修改第6行, GRUB_DEFAULT=0 即为默认启动项, 0通常是 Ubuntu, 而 Windows 系统通常在下面, 需要在开机启动的时候数一下(从0开始数).修改完毕后, 更新 grub: sudo update-grub 即可. 5 登录启动项需要区分以下概念:开机启动项指的是针对于所有用户适用的启动程序.登录启动项指的是针对于特定用户适用的启动程序. Launcher中搜索 Startup Application , 并点击打开.直接增加启动项即可. 6 自定义 Grub 主题从 https://www.opendesktop.org/s/Gnome/p/1307852/ 下载皮肤, 解压后运行 ./install.sh 安装 7 硬盘操作分区操作 123456789101112131415161718# 查看已挂载磁盘df -h# 查看所有磁盘 (包括未挂载的磁盘)sudo fdisk -l# 查看某个磁盘sudo fdisk -l /dev/sda# 对某个磁盘操作sudo fdisk /dev/sda# 此时会进入操作模式, 按 m 显示所有可用命令# 查看磁盘和分区之间的关系sudo lsblk# 查看磁盘分区的 UUID 号sudo blkid 格式化硬盘如果是刚分好区的硬盘, 则在需要先格式化分区, 否则既无法查看UUID, 也无法挂载到某一个目录下. 1sudo mkfs.ext4 /dev/sda1 临时挂载 1sudo mount /dev/sda2 /media/disk1 永久挂载先查看各个磁盘挂载的信息 sudo fdisk -l, 并确认目标硬盘的位置 /dev/sd* ；查看该硬盘的UUID号 sudo blkid (使用UUID号可以避免硬盘更换位置后 /dev/sd* 发生变化, 而UUID不会变.)；修改 /etc/fstab , 在最后增加以下内容, UUID替换为上一步查出来的, 第二个参数为挂载路径, 第三个参数为分区格式；最后的三个参数defaults，它代表包含了选项rw,suid,dev,exec,auto,nouser和 async；dump。此处为1的话，表示要将整个里的内容备份；为0的话，表示不备份，现在很少用到dump这个工具，在这里一般选0。pass。这里用来指定如何使用fsck来检查硬盘。如果这里填0，则不检查；挂载点为 / 的（即根分区），必须在这里填写1，其他的都不能填写1。如果有分区填写大于1的话，则在检查完根分区后，接着按填写的数字从小到大依次检查下去。同数字 的同时检查。 123UUID=xxxxxxxxxxxxxxx /media/Win10OS ntfs defaults 0 0UUID=xxxxxxx-xxxxxx-xxxxxx-xxxxxxx /data ext4 defaults 0 0 8 安装中文字体1234sudo apt updatesudo apt install ttf-mscorefonts-installer# 安装完成后更新字体缓存sudo fc-cache -f -v 本文参考 https://zhuanlan.zhihu.com/p/601418015?utm_id=0 课程中心Qianj.51CTO","link":"/clqz1g1ed00000gyj3m2s7n7i.html"},{"title":"use web vnc to access Android phones","text":"前提：很久之前的一部旧手机配置了VNC，可以通过VNC客户端进行访问，无详细记录。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475~ $ mkdir qianj~ $ cd qianj~/qianj $ git clone https://github.com/novnc/noVNC.gitCloning into 'noVNC'...remote: Enumerating objects: 12754, done.remote: Counting objects: 100% (416/416), done.remote: Compressing objects: 100% (193/193), done.remote: Total 12754 (delta 272), reused 270 (delta 223), pack-reused 12338Receiving objects: 100% (12754/12754), 10.26 MiB | 1.99 MiB/s, done.Resolving deltas: 100% (8872/8872), done.~/qianj $ lltotal 4drwx------ 12 u0_a152 u0_a152 4096 Jan 5 13:32 noVNC~/qianj $ cd noVNC/~/qianj/noVNC $ lltotal 84-rw------- 1 u0_a152 u0_a152 358 Jan 5 13:32 AUTHORS-rw------- 1 u0_a152 u0_a152 2163 Jan 5 13:32 LICENSE.txt-rw------- 1 u0_a152 u0_a152 8758 Jan 5 13:32 README.mddrwx------ 6 u0_a152 u0_a152 4096 Jan 5 13:32 appdrwx------ 6 u0_a152 u0_a152 4096 Jan 5 13:32 coredrwx------ 2 u0_a152 u0_a152 4096 Jan 5 13:32 docs-rw------- 1 u0_a152 u0_a152 2421 Jan 5 13:32 karma.conf.js-rw------- 1 u0_a152 u0_a152 2122 Jan 5 13:32 package.jsondrwx------ 2 u0_a152 u0_a152 4096 Jan 5 13:32 podrwx------ 4 u0_a152 u0_a152 4096 Jan 5 13:32 snapdrwx------ 2 u0_a152 u0_a152 4096 Jan 5 13:32 testsdrwx------ 2 u0_a152 u0_a152 4096 Jan 5 13:32 utilsdrwx------ 3 u0_a152 u0_a152 4096 Jan 5 13:32 vendor-rw------- 1 u0_a152 u0_a152 15403 Jan 5 13:32 vnc.html-rw------- 1 u0_a152 u0_a152 5781 Jan 5 13:32 vnc_lite.html~/qianj/noVNC $ cd utils/~/.../noVNC/utils $ pkg install openssl-tool~/.../noVNC/utils $ openssl req -new -x509 -days 3650 -nodes -out self.pem -keyout self.pem# 一直回车即可~/.../noVNC/utils $ lltotal 40-rw------- 1 u0_a152 u0_a152 538 Jan 5 13:32 README.md-rwx------ 1 u0_a152 u0_a152 396 Jan 5 13:32 b64-to-binary.pl-rwx------ 1 u0_a152 u0_a152 5134 Jan 5 13:32 convert.js-rwx------ 1 u0_a152 u0_a152 3160 Jan 5 13:32 genkeysymdef.js-rwx------ 1 u0_a152 u0_a152 7762 Jan 5 13:32 novnc_proxy-rw------- 1 u0_a152 u0_a152 2949 Jan 5 13:35 self.pem-rwx------ 1 u0_a152 u0_a152 911 Jan 5 13:32 u2x11-rwx------ 1 u0_a152 u0_a152 627 Jan 5 13:32 validate~/.../noVNC/utils $~/.../noVNC/utils $ ./novnc_proxy --vnc 192.168.66.152:5901# 启动的时候会拉取websockifyNo installed websockify, attempting to clone websockify...Cloning into '/data/data/com.termux/files/home/qianj/noVNC/utils/websockify'...remote: Enumerating objects: 4535, done.remote: Counting objects: 100% (208/208), done.remote: Compressing objects: 100% (99/99), done.remote: Total 4535 (delta 122), reused 154 (delta 101), pack-reused 4327Receiving objects: 100% (4535/4535), 4.68 MiB | 157.00 KiB/s, done.Resolving deltas: 100% (2964/2964), done.Using local websockify at /data/data/com.termux/files/home/qianj/noVNC/utils/websockify/runStarting webserver and WebSockets proxy on port 6080/data/data/com.termux/files/home/qianj/noVNC/utils/websockify/websockify/websocket.py:31: UserWarning: no 'numpy' module, HyBi protocol will be slower warnings.warn(&quot;no 'numpy' module, HyBi protocol will be slower&quot;)WebSocket server settings: - Listen on :6080 - Web server. Web root: /data/data/com.termux/files/home/qianj/noVNC - SSL/TLS support - proxying from :6080 to 192.168.66.152:5901Navigate to this URL: http://localhost:6080/vnc.html?host=localhost&amp;port=6080Press Ctrl-C to exit 然后可以通过web访问的方式来登录了http://192.168.66.152:6080/vnc.html登录成功后如下图 课程中心Qianj.51CTO","link":"/clr08hri00000z0yj6mv415oz.html"}],"tags":[{"name":"ic&#x2F;eda","slug":"ic-eda","link":"/tags/ic-eda/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"note","slug":"note","link":"/tags/note/"},{"name":"解决问题","slug":"解决问题","link":"/tags/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"},{"name":"linux下查看PDF","slug":"linux下查看PDF","link":"/tags/linux%E4%B8%8B%E6%9F%A5%E7%9C%8BPDF/"},{"name":"license","slug":"license","link":"/tags/license/"},{"name":"ic设计","slug":"ic设计","link":"/tags/ic%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"qianj-work","slug":"qianj-work","link":"/categories/qianj-work/"},{"name":"qianj-up","slug":"qianj-up","link":"/categories/qianj-up/"},{"name":"qianj-note","slug":"qianj-note","link":"/categories/qianj-note/"},{"name":"note","slug":"note","link":"/categories/note/"},{"name":"qianj-log","slug":"qianj-log","link":"/categories/qianj-log/"}],"pages":[]}